pipeline {
    agent any
    stages {
        stage('Build') {
            when {
                expression {
                    script {
                        def serviceName = env.GIT_BRANCH.split('/')[-1]
                        serviceName == 'apigateway-service' ||
                        serviceName == 'discovery-service' ||
                        serviceName == 'fridge-service' ||
                        serviceName == 'ingredient-service' ||
                        serviceName == 'recipe-service' ||
                        serviceName == 'recommend-service' ||
                        serviceName == 'search-service' ||
                        serviceName == 'user-service'
                    }
                }
            }
            steps {
                script {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    buildService(serviceName)
                }
            }
        }

        stage('Deploy-service') {
            when {
                expression {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
					
                    serviceName == 'fridge-service' ||
                    serviceName == 'ingredient-service' ||
                    serviceName == 'recipe-service' ||
                    serviceName == 'recommend-service' ||
                    serviceName == 'search-service' ||
                    serviceName == 'user-service'
                }
            }
            steps {
                script {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
					def DISCOVERY = env.DISCOVERY
					def DISCOVERY_PORT = env.DISCOVERY_PORT
					def SERVER_URL = env.SERVER_URL
					def DB_PORT = env.DB_PORT
					def DB_USERNAME = env.DB_USERNAME
					def DB_PASSWORD = env.DB_PASSWORD
                    deployService(serviceName, DISCOVERY, DISCOVERY_PORT, SERVER_URL, DB_PORT, DB_USERNAME, DB_PASSWORD)
                }
            }
        }
        stage('Deploy-discovery') {
            when {
                expression {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    serviceName == 'discovery-service'
                }
            }
            steps {
                dir('sungchef_backend'){
                    dir('sungchef'){
                        dir('discovery-service') {
                            script{
                                sh 'docker build -t discovery-service .'
                                sh 'docker rm -f discovery-service'
                                sh 'docker run --network sungchef-network -d --name discovery-service -e DISCOVERY_PORT=${env.DISCOVERY_PORT} -p ${env.DISCOVERY_PORT}:${env.$DISCOVERY_PORT} discovery-service'
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy-gateway') {
            when {
                expression {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    serviceName == 'apigateway-service'
                }
            }
            steps {
                dir('sungchef_backend'){
                    dir('sungchef'){
                        dir('apigateway-service') {
                            script{
								sh 'docker build -t apigateway-service .'
                                sh 'docker rm -f apigateway-service'
                                sh 'docker run --network sungchef-network -d --name apigateway-service -e GATEWAY_PORT=${env.GATEWAY_PORT} -e DISCOVERY=${env.DISCOVERY} -e DISCOVERY_PORT=${env.DISCOVERY_PORT} -p ${env.GATEWAY_PORT}:${env.GATEWAY_PORT} apigateway-service'
                            }
                        }
                    }
                }
            }
        }		
    }
    post {
        success {
            script {
                def serviceName = env.GIT_BRANCH.split('/')[-1]
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
				def GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
				
                mattermostSend ( color: 'good',			
                message: "${serviceName} 빌드 성공: #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n${GIT_COMMIT_MSG}\n(<${env.BUILD_URL}|Details>)",
                )
            }
        }
        failure {
            script {
                def serviceName = env.GIT_BRANCH.split('/')[-1]
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
				def GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
                mattermostSend ( color: 'danger',
                message: "${serviceName} 빌드 실패: #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n${GIT_COMMIT_MSG}\n(<${env.BUILD_URL}|Details>)",
                )
            }
        }
    }
}

def buildService(serviceName) {
    dir('sungchef_backend'){
        dir('sungchef'){
            dir(serviceName) {
                script{		
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                    sh 'chmod +x ./docker_install.sh'
                    sh './docker_install.sh'
                }
            }
        }
    }
}

def deployService(serviceName, DISCOVERY, DISCOVERY_PORT, SERVER_URL, DB_PORT, DB_USERNAME, DB_PASSWORD) {
    dir('sungchef_backend'){
        dir('sungchef'){
            dir(serviceName) {
                script{		
                    sh "docker build -t ${serviceName} ."
                    sh "docker rm -f ${serviceName}"
                    sh "docker run --network sungchef-network -d --name $serviceName -e DISCOVERY=$DISCOVERY -e DISCOVERY_PORT=$DISCOVERY_PORT -e SERVER_URL=$SERVER_URL -e DB_PORT=$DB_PORT -e DB_USERNAME=$DB_USERNAME -e DB_PASSWORD=$DB_PASSWORD $serviceName"
                }
            }
        }
    }
}
