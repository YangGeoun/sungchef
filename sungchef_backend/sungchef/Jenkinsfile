pipeline {
    agent any
    environment {
		DISCOVERY_PORT = "${env.DISCOVERY_PORT}"
		DISCOVERY = "${env.DISCOVERY}"
	}

    stages {
        stage('Build') {
            when {
                expression {
                    script {
                        def serviceName = env.GIT_BRANCH.split('/')[-1]
                        serviceName == 'apigateway-service' ||
                        serviceName == 'discovery-service' ||
                        serviceName == 'fridge-service' ||
                        serviceName == 'ingredient-service' ||
                        serviceName == 'recipe-service' ||
                        serviceName == 'recommend-service' ||
                        serviceName == 'search-service' ||
                        serviceName == 'user-service'
                    }
                }
            }
            steps {
                script {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    buildService(serviceName)
                }
            }
        }

        stage('Deploy-service') {
            when {
                expression {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    serviceName == 'fridge-service' ||
                    serviceName == 'ingredient-service' ||
                    serviceName == 'recipe-service' ||
                    serviceName == 'recommend-service' ||
                    serviceName == 'search-service' ||
                    serviceName == 'user-service'
                }
            }
            steps {
                script {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    deployService(serviceName)
                }
            }
        }
        stage('Deploy-discovery') {
            when {
                expression {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    serviceName == 'discovery-service'
                }
            }
            steps {
                dir('sungchef_backend'){
                    dir('sungchef'){
                        dir('discovery-service') {
                            script{
								sh 'docker build --build-arg DISCOVERY_PORT=$DISCOVERY_PORT DISCOVERY=$DISCOVERY -t discovery-service .'							
                                sh 'docker rm -f discovery-service'
                                sh 'docker run --network sungchef-network -d --name discovery-service -e -p ${DISCOVERY_PORT}:${DISCOVERY_PORT} discovery-service'
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy-gateway') {
            when {
                expression {
                    def serviceName = env.GIT_BRANCH.split('/')[-1]
                    serviceName == 'apigateway-service'
                }
            }
            steps {
                dir('sungchef_backend'){
                    dir('sungchef'){
                        dir('apigateway-service') {
                            script{
								sh 'docker build --build-arg DISCOVERY_PORT=$DISCOVERY_PORT DISCOVERY=$DISCOVERY -t discovery-service .'							
                                sh 'docker rm -f apigateway-service'
                                sh 'docker run --network sungchef-network -d --name apigateway-service -p 8000:8000 apigateway-service'
                            }
                        }
                    }
                }
            }
        }		
    }
    post {
        success {
            script {
                def serviceName = env.GIT_BRANCH.split('/')[-1]
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend ( color: 'good',
                message: "${serviceName} 빌드 성공: #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n${GIT_COMMIT_MSG}\n(<${env.BUILD_URL}|Details>)",
                )
            }
        }
        failure {
            script {
                def serviceName = env.GIT_BRANCH.split('/')[-1]
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
				def GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
                mattermostSend ( color: 'danger',
                message: "${serviceName} 빌드 실패: #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n${GIT_COMMIT_MSG}\n(<${env.BUILD_URL}|Details>)",
                )
            }
        }
    }
}

def buildService(serviceName) {
    dir('sungchef_backend'){
        dir('sungchef'){
            dir(serviceName) {
                script{
                    sh 'chmod +x gradlew'
				    sh "sed -i 's/\${DISCOVERY}/${DISCOVERY}/' ./src/main/resources/application.yml"
				    sh "sed -i 's/\${DISCOVERY_PORT}/${DISCOVERY_PORT}/' ./src/main/resources/application.yml"					
                    sh './gradlew clean build'
                    sh 'chmod +x ./docker_install.sh'
                    sh './docker_install.sh'
                }
            }
        }
    }
}

def deployService(serviceName) {
    dir('sungchef_backend'){
        dir('sungchef'){
            dir(serviceName) {
                script{
                    sh "docker build -t ${serviceName} ."
                    sh "docker rm -f ${serviceName}"
                    sh "docker run --network sungchef-network -e DISCOVERY=${env.DISCOVERY} -e DISCOVERY_PORT=${env.DISCOVERY_PORT} -d --name ${serviceName} ${serviceName}"
                }
            }
        }
    }
}
